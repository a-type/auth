// @unocss-include
'use client';
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import * as TooltipPrimitive from '@radix-ui/react-tooltip';
import classNames from 'clsx';
function Content(_a) {
    var { children, className } = _a, props = __rest(_a, ["children", "className"]);
    return (_jsx(TooltipPrimitive.Portal, { children: _jsxs(TooltipPrimitive.Content, Object.assign({ className: classNames('layer-components:relative layer-components:rounded-md layer-components:py-2 layer-components:px-3 layer-components:bg-black layer-components:text-white layer-components:text-sm layer-components:leading-tight layer-components:shadow-sm layer-components:select-none layer-components:hidden layer-components:z-tooltip layer-components:sm:display-initial', '[&[data-state=delayed-open]]:display-initial', '[&[data-state=instant-open]]:display-initial', 'layer-components:transform-origin-[var(--radix-tooltip-content-transform-origin)]', 'layer-components:[&[data-state=delayed-open]]:animate-popover-in', className) }, props, { children: [children, _jsx(TooltipPrimitive.Arrow, { className: "fill-black" })] })) }));
}
export const TooltipProvider = TooltipPrimitive.Provider;
export function Tooltip(_a) {
    var { content, children, open, disabled } = _a, rest = __rest(_a, ["content", "children", "open", "disabled"]);
    return (_jsxs(TooltipPrimitive.Root, Object.assign({ open: open }, { children: [disabled ? (children) : (_jsx(TooltipPrimitive.TooltipTrigger, Object.assign({ asChild: true }, rest, { children: children }))), _jsx(Content, Object.assign({ sideOffset: 12 }, { children: content }))] })));
}
//# sourceMappingURL=Tooltip.js.map
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, useCallback, useMemo } from 'react';
import { CalendarContextProvider } from './CalendarContext';
import { WeekDay } from './constants';
import { today } from './dateUtils';
import { isEventTargetDay } from './eventUtils';
import useCalendarSelection from './useCalendarSelection';
var noop = function () { };
var defaultGetDateEnabled = function () { return true; };
/**
 * An all-purpose Calendar primitive which manages day selection and various useful event callbacks.
 * Rendering is up to you; this component doesn't render any days or interactive elements - just a div
 * to help track focus within the component.
 * @public
 */
export var Calendar = forwardRef(function (_a, ref) {
    var providedValue = _a.value, onChange = _a.onChange, month = _a.displayMonth, year = _a.displayYear, _b = _a.onDisplayChange, onMonthChange = _b === void 0 ? noop : _b, providedRangeValue = _a.rangeValue, onRangeChange = _a.onRangeChange, onRangeStartChange = _a.onRangeStartChange, _c = _a.getDateEnabled, getDateEnabled = _c === void 0 ? defaultGetDateEnabled : _c, _d = _a.defaultDate, defaultDate = _d === void 0 ? today : _d, onFocus = _a.onFocus, onBlur = _a.onBlur, _e = _a.weekStartsOn, weekStartsOn = _e === void 0 ? WeekDay.Sunday : _e, restProps = __rest(_a, ["value", "onChange", "displayMonth", "displayYear", "onDisplayChange", "rangeValue", "onRangeChange", "onRangeStartChange", "getDateEnabled", "defaultDate", "onFocus", "onBlur", "weekStartsOn"]);
    var _f = useCalendarSelection({
        value: providedValue,
        onChange: onChange,
        onMonthChange: onMonthChange,
        month: month,
        year: year,
        rangeValue: providedRangeValue,
        onRangeChange: onRangeChange,
        onRangeStartChange: onRangeStartChange,
        getDateEnabled: getDateEnabled,
        defaultDate: defaultDate,
    }), props = _f.props, highlightedDate = _f.highlightedDate, onDaySelect = _f.onDaySelect, onDayHover = _f.onDayHover, rangeValue = _f.rangeValue, value = _f.value, setHighlightedDate = _f.setHighlightedDate;
    var _g = React.useState(false), isFocusWithin = _g[0], setIsFocusWithin = _g[1];
    var context = useMemo(function () { return ({
        setDay: onDaySelect,
        setDayHovered: onDayHover,
        highlightedDate: highlightedDate,
        month: month,
        year: year,
        value: value,
        rangeValue: rangeValue,
        getDateEnabled: getDateEnabled,
        isFocusWithin: isFocusWithin,
        weekStartsOn: weekStartsOn,
    }); }, [
        highlightedDate,
        month,
        onDayHover,
        onDaySelect,
        onMonthChange,
        onRangeChange,
        onRangeStartChange,
        rangeValue,
        setHighlightedDate,
        year,
        value,
        getDateEnabled,
        isFocusWithin,
        weekStartsOn,
    ]);
    var handleRootFocus = useCallback(function (ev) {
        // if a day element was focused, update context
        if (isEventTargetDay(ev)) {
            setIsFocusWithin(true);
        }
        onFocus === null || onFocus === void 0 ? void 0 : onFocus(ev);
    }, [onFocus]);
    var handleRootBlur = useCallback(function (ev) {
        setIsFocusWithin(false);
        onBlur === null || onBlur === void 0 ? void 0 : onBlur(ev);
    }, [onBlur]);
    return (React.createElement(CalendarContextProvider, { value: context },
        React.createElement("div", __assign({}, restProps, props, { onFocus: handleRootFocus, onBlur: handleRootBlur, ref: ref }))));
});
Calendar.displayName = 'Calendar';
/** @private docs only! */
export var DocsCalendar = function (props) { return React.createElement(Calendar, __assign({}, props)); };
//# sourceMappingURL=Calendar.js.map
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.stylized = exports.disabledDays = exports.wideRange = exports.weekStartsOnMonday = exports.dayLabels = exports.range = exports.simple = void 0;
var react_1 = require("@stitches/react");
var react_2 = __importStar(require("react"));
var _1 = require(".");
var Calendar_1 = require("./Calendar");
var CalendarDay_1 = require("./CalendarDay");
var constants_1 = require("./constants");
exports.default = {
    title: 'Calendar',
    component: Calendar_1.Calendar,
};
var now = new Date();
/** Custom styling of primitive components */
var StyledDay = (0, react_1.styled)(CalendarDay_1.CalendarDay, {
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    cursor: 'pointer',
    '&[data-selected]': {
        backgroundColor: 'black',
        color: '#fff',
    },
    '&[data-in-range]': {
        backgroundColor: '#fff',
    },
    '&[data-range-start]': {
        backgroundColor: 'black',
        color: '#fff',
    },
    '&[data-range-end]': {
        backgroundColor: 'black',
        color: '#fff',
    },
    '&:disabled': {
        opacity: 0.5,
        cursor: 'default',
    },
    '&[data-different-month]': {
        visibility: 'hidden',
    },
});
var StyledGrid = (0, react_1.styled)(Calendar_1.Calendar, {
    display: 'grid',
    gridGap: '4px',
    gridTemplateColumns: 'repeat(7, 32px)',
    gridAutoRows: '32px',
});
var simple = function () {
    var _a;
    var _b = (0, react_2.useState)({
        month: now.getMonth(),
        year: now.getFullYear(),
    }), _c = _b[0], month = _c.month, year = _c.year, setViewInfo = _b[1];
    var _d = (0, react_2.useState)(null), value = _d[0], setValue = _d[1];
    var monthLabel = new Date(year, month).toLocaleDateString('en-US', {
        month: 'long',
        year: 'numeric',
    });
    return (react_2.default.createElement("div", { style: { display: 'flex', flexDirection: 'column', alignItems: 'start' } },
        react_2.default.createElement("p", null, "A Calendar is a logical input primitive which allows selecting a single day or range of days from a particular month"),
        react_2.default.createElement("div", null,
            react_2.default.createElement("div", { style: { display: 'flex', justifyContent: 'center' } },
                react_2.default.createElement("button", { onClick: function () { return setViewInfo(function (v) { return (__assign(__assign({}, v), { month: v.month - 1 })); }); } }, "<"),
                react_2.default.createElement("span", { style: { margin: '0 4px' } }, monthLabel),
                react_2.default.createElement("button", { onClick: function () { return setViewInfo(function (v) { return (__assign(__assign({}, v), { month: v.month + 1 })); }); } }, ">")),
            react_2.default.createElement(StyledGrid, { displayMonth: month, displayYear: year, value: value, onChange: setValue, onDisplayChange: setViewInfo },
                react_2.default.createElement(_1.CalendarDays, null, function (value) { return react_2.default.createElement(StyledDay, { value: value, key: value.key }); }))),
        react_2.default.createElement("p", null,
            "Selected date: ", (_a = value === null || value === void 0 ? void 0 : value.toLocaleDateString()) !== null && _a !== void 0 ? _a : 'none')));
};
exports.simple = simple;
var range = function () {
    var _a, _b;
    var _c = (0, react_2.useState)({
        month: now.getMonth(),
        year: now.getFullYear(),
    }), _d = _c[0], month = _d.month, year = _d.year, setViewInfo = _c[1];
    var _e = (0, react_2.useState)({ start: null, end: null }), rangeValue = _e[0], setRangeValue = _e[1];
    var monthLabel = new Date(year, month).toLocaleDateString('en-US', {
        month: 'long',
        year: 'numeric',
    });
    return (react_2.default.createElement("div", { style: { display: 'flex', flexDirection: 'column', alignItems: 'start' } },
        react_2.default.createElement("p", null, "A Calendar can select a range of dates as well"),
        react_2.default.createElement("div", null,
            react_2.default.createElement("div", { style: { display: 'flex', justifyContent: 'center' } },
                react_2.default.createElement("button", { onClick: function () { return setViewInfo(function (v) { return (__assign(__assign({}, v), { month: v.month - 1 })); }); } }, "<"),
                react_2.default.createElement("span", { style: { margin: '0 4px' } }, monthLabel),
                react_2.default.createElement("button", { onClick: function () { return setViewInfo(function (v) { return (__assign(__assign({}, v), { month: v.month + 1 })); }); } }, ">")),
            react_2.default.createElement(StyledGrid, { displayMonth: month, displayYear: year, onDisplayChange: setViewInfo, rangeValue: rangeValue, onRangeChange: setRangeValue },
                react_2.default.createElement(_1.CalendarDays, null, function (value) { return react_2.default.createElement(StyledDay, { value: value, key: value.key }); }))),
        react_2.default.createElement("p", null,
            "Selected dates: ", (_a = rangeValue.start) === null || _a === void 0 ? void 0 :
            _a.toLocaleDateString(),
            " -",
            ' ', (_b = rangeValue.end) === null || _b === void 0 ? void 0 :
            _b.toLocaleDateString())));
};
exports.range = range;
var dayLabels = function () {
    var _a;
    var _b = (0, react_2.useState)({
        month: now.getMonth(),
        year: now.getFullYear(),
    }), _c = _b[0], month = _c.month, year = _c.year, setViewInfo = _b[1];
    var _d = (0, react_2.useState)(null), value = _d[0], setValue = _d[1];
    var monthLabel = new Date(year, month).toLocaleDateString('en-US', {
        month: 'long',
        year: 'numeric',
    });
    return (react_2.default.createElement("div", { style: { display: 'flex', flexDirection: 'column', alignItems: 'start' } },
        react_2.default.createElement("p", null, "Rendering is completely within your control - once you have a basic grid, you're free to add additional rendered stuff, like traditional day labels."),
        react_2.default.createElement("div", null,
            react_2.default.createElement("div", { style: { display: 'flex', justifyContent: 'center' } },
                react_2.default.createElement("button", { onClick: function () { return setViewInfo(function (v) { return (__assign(__assign({}, v), { month: v.month - 1 })); }); } }, "<"),
                react_2.default.createElement("span", { style: { margin: '0 4px' } }, monthLabel),
                react_2.default.createElement("button", { onClick: function () { return setViewInfo(function (v) { return (__assign(__assign({}, v), { month: v.month + 1 })); }); } }, ">")),
            react_2.default.createElement(StyledGrid, { displayMonth: month, displayYear: year, value: value, onChange: setValue, onDisplayChange: setViewInfo },
                ['S', 'M', 'T', 'W', 'T', 'F', 'S'].map(function (day, idx) { return (react_2.default.createElement("div", { style: {
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                    }, key: idx }, day)); }),
                react_2.default.createElement(_1.CalendarDays, null, function (value) { return react_2.default.createElement(StyledDay, { value: value, key: value.key }); }))),
        react_2.default.createElement("p", null,
            "Selected date: ", (_a = value === null || value === void 0 ? void 0 : value.toLocaleDateString()) !== null && _a !== void 0 ? _a : 'none')));
};
exports.dayLabels = dayLabels;
var weekStartsOnMonday = function () {
    var _a;
    var _b = (0, react_2.useState)({
        month: now.getMonth(),
        year: now.getFullYear(),
    }), _c = _b[0], month = _c.month, year = _c.year, setViewInfo = _b[1];
    var _d = (0, react_2.useState)(null), value = _d[0], setValue = _d[1];
    var monthLabel = new Date(year, month).toLocaleDateString('en-US', {
        month: 'long',
        year: 'numeric',
    });
    return (react_2.default.createElement("div", { style: { display: 'flex', flexDirection: 'column', alignItems: 'start' } },
        react_2.default.createElement("p", null, "You can supply a custom week start day index according to your locale"),
        react_2.default.createElement("div", null,
            react_2.default.createElement("div", { style: { display: 'flex', justifyContent: 'center' } },
                react_2.default.createElement("button", { onClick: function () { return setViewInfo(function (v) { return (__assign(__assign({}, v), { month: v.month - 1 })); }); } }, "<"),
                react_2.default.createElement("span", { style: { margin: '0 4px' } }, monthLabel),
                react_2.default.createElement("button", { onClick: function () { return setViewInfo(function (v) { return (__assign(__assign({}, v), { month: v.month + 1 })); }); } }, ">")),
            react_2.default.createElement(StyledGrid, { displayMonth: month, displayYear: year, value: value, onChange: setValue, onDisplayChange: setViewInfo, weekStartsOn: constants_1.WeekDay.Monday },
                ['M', 'T', 'W', 'T', 'F', 'S', 'S'].map(function (day, idx) { return (react_2.default.createElement("div", { style: {
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                    }, key: idx }, day)); }),
                react_2.default.createElement(_1.CalendarDays, null, function (value) { return react_2.default.createElement(StyledDay, { value: value, key: value.key }); }))),
        react_2.default.createElement("p", null,
            "Selected date: ", (_a = value === null || value === void 0 ? void 0 : value.toLocaleDateString()) !== null && _a !== void 0 ? _a : 'none')));
};
exports.weekStartsOnMonday = weekStartsOnMonday;
var SimpleGrid = (0, react_1.styled)('div', {
    display: 'grid',
    gridGap: '4px',
    gridTemplateColumns: 'repeat(7, 32px)',
    gridAutoRows: '32px',
});
var wideRange = function () {
    var _a = (0, react_2.useState)({
        month: now.getMonth(),
        year: now.getFullYear(),
    }), _b = _a[0], month = _b.month, year = _b.year, setViewInfo = _a[1];
    var _c = (0, react_2.useState)({ start: null, end: null }), rangeValue = _c[0], setRangeValue = _c[1];
    var onMonthChange = (0, react_2.useCallback)(function (_a) {
        var newMonth = _a.month, newYear = _a.year;
        /**
         * Important UX consideration:
         *
         * since we are displaying 2 months at once, we don't
         * always want to change our view if the user's cursor
         * date moves from one month to another. Specifically,
         * if they move from the first visible month to the
         * second visible month, we don't need to change the view,
         * since they are still within the visible range.
         * So, we write logic to ignore that case!
         */
        if (newMonth === month + 1 && newYear === year) {
            return; // ignore movement from the first to the second frame
        }
        setViewInfo({
            month: newMonth,
            year: newYear,
        });
    }, [setViewInfo, month, year]);
    var monthLabel = new Date(year, month).toLocaleDateString('en-US', {
        month: 'long',
        year: 'numeric',
    });
    // used for the two-calendar demo
    var nextMonth = new Date(year, month + 1);
    var nextMonthLabel = nextMonth.toLocaleDateString('en-US', {
        month: 'long',
        year: 'numeric',
    });
    return (react_2.default.createElement(react_2.default.Fragment, null,
        react_2.default.createElement("p", null, "It's relatively trivial to synchronize two calendars to display a larger selection range by utilizing a render prop to change how the calendar state is displayed"),
        react_2.default.createElement(Calendar_1.Calendar, { displayMonth: month, displayYear: year, onDisplayChange: onMonthChange, rangeValue: rangeValue, onRangeChange: setRangeValue },
            react_2.default.createElement("div", { style: { display: 'flex' } },
                react_2.default.createElement("div", { style: { marginRight: '8px' } },
                    react_2.default.createElement("div", { style: { display: 'flex', justifyContent: 'center' } },
                        react_2.default.createElement("button", { onClick: function () {
                                return setViewInfo(function (v) { return (__assign(__assign({}, v), { month: v.month - 1 })); });
                            } }, "<"),
                        react_2.default.createElement("span", { style: { margin: '0 auto 0 auto' } }, monthLabel)),
                    react_2.default.createElement(SimpleGrid, null,
                        react_2.default.createElement(_1.CalendarDays, null, function (value) { return react_2.default.createElement(StyledDay, { value: value, key: value.key }); }))),
                react_2.default.createElement("div", null,
                    react_2.default.createElement("div", { style: { display: 'flex', justifyContent: 'center' } },
                        react_2.default.createElement("span", { style: { margin: '0 auto 0 auto' } }, nextMonthLabel),
                        react_2.default.createElement("button", { onClick: function () {
                                return setViewInfo(function (v) { return (__assign(__assign({}, v), { month: v.month + 1 })); });
                            } }, ">")),
                    react_2.default.createElement(SimpleGrid, null,
                        react_2.default.createElement(_1.CalendarDays, { monthOffset: 1 }, function (value) { return react_2.default.createElement(StyledDay, { value: value, key: value.key }); })))))));
};
exports.wideRange = wideRange;
var disabledDays = function () {
    var _a = (0, react_2.useState)({
        month: now.getMonth(),
        year: now.getFullYear(),
    }), _b = _a[0], month = _b.month, year = _b.year, setViewInfo = _a[1];
    var _c = (0, react_2.useState)(null), value = _c[0], setValue = _c[1];
    var monthLabel = new Date(year, month).toLocaleDateString('en-US', {
        month: 'long',
        year: 'numeric',
    });
    // example: disable next week
    var nextWeekEnds = new Date(year, month, now.getDate() + 14);
    var getDateEnabled = (0, react_2.useCallback)(function (date) {
        return !(date.getTime() >= now.getTime() && date.getTime() < nextWeekEnds.getTime());
    }, []);
    return (react_2.default.createElement(react_2.default.Fragment, null,
        react_2.default.createElement("p", null, "Days or ranges of days can be disabled using the \"getDateEnabled\" prop"),
        react_2.default.createElement("div", null,
            react_2.default.createElement("span", null, monthLabel),
            react_2.default.createElement(StyledGrid, { displayMonth: month, displayYear: year, value: value, onChange: setValue, onDisplayChange: setViewInfo, getDateEnabled: getDateEnabled },
                react_2.default.createElement(_1.CalendarDays, null, function (value) { return react_2.default.createElement(StyledDay, { value: value, key: value.key }); })))));
};
exports.disabledDays = disabledDays;
/**
 * Stylized examples
 */
var StylizedGrid = (0, react_1.styled)(SimpleGrid, {
    gridGap: 0,
});
var StylizedDay = (0, react_1.styled)(StyledDay, {
    border: '1px solid transparent',
    backgroundColor: 'transparent',
    borderRadius: 0,
    // border collapse
    marginRight: -1,
    marginBottom: -1,
    // keep above blank days
    position: 'relative',
    transition: '0.2s ease all',
    '&[data-weekend]': {
        backgroundColor: '#fafaff',
    },
    '&[data-highlighted]': {
        backgroundColor: '#e5efee',
    },
    '&[data-selected]': {
        backgroundColor: '#20b0ae',
        color: '#fff',
    },
    '&[data-in-range]': {
        backgroundColor: '#e0ffff',
    },
    '&[data-range-start]': {
        backgroundColor: '#20b0ae',
        borderTopLeftRadius: '6px',
        borderBottomLeftRadius: '6px',
    },
    '&[data-range-end]': {
        backgroundColor: '#20b0ae',
        borderTopRightRadius: '6px',
        borderBottomRightRadius: '6px',
    },
    '&:disabled': {
        opacity: 0.5,
        cursor: 'default',
    },
    '&[data-today]': {
        boxShadow: '0 0 0 2px #ecce1f',
        zIndex: 1,
    },
    '&[data-top-edge]': {
        borderTop: '1px solid #000',
    },
    '&[data-bottom-edge]': {
        borderBottom: '1px solid #000',
    },
    '&[data-first-column]': {
        borderLeft: '1px solid #000',
    },
    '&[data-last-column]': {
        borderRight: '1px solid #000',
    },
    '&[data-day-first]': {
        borderLeft: '1px solid #000',
    },
    '&[data-day-last]': {
        borderRight: '1px solid #000',
    },
});
var stylized = function () {
    var _a = (0, react_2.useState)({
        month: now.getMonth(),
        year: now.getFullYear(),
    }), _b = _a[0], month = _b.month, year = _b.year, setViewInfo = _a[1];
    var _c = (0, react_2.useState)({ start: null, end: null }), rangeValue = _c[0], setRangeValue = _c[1];
    var onMonthChange = (0, react_2.useCallback)(function (_a) {
        var newMonth = _a.month, newYear = _a.year;
        /**
         * Important UX consideration:
         *
         * since we are displaying 2 months at once, we don't
         * always want to change our view if the user's cursor
         * date moves from one month to another. Specifically,
         * if they move from the first visible month to the
         * second visible month, we don't need to change the view,
         * since they are still within the visible range.
         * So, we write logic to ignore that case!
         */
        if (newMonth === month + 1 && newYear === year) {
            return; // ignore movement from the first to the second frame
        }
        setViewInfo({
            month: newMonth,
            year: newYear,
        });
    }, [setViewInfo, month, year]);
    var monthLabel = new Date(year, month).toLocaleDateString('en-US', {
        month: 'long',
        year: 'numeric',
    });
    // used for the two-calendar demo
    var nextMonth = new Date(year, month + 1);
    var nextMonthLabel = nextMonth.toLocaleDateString('en-US', {
        month: 'long',
        year: 'numeric',
    });
    return (react_2.default.createElement(react_2.default.Fragment, null,
        react_2.default.createElement("p", null, "Calendar day elements receive plenty of data attributes which let you implement advanced styling based on their visual or temporal position."),
        react_2.default.createElement(Calendar_1.Calendar, { displayMonth: month, displayYear: year, onDisplayChange: onMonthChange, rangeValue: rangeValue, onRangeChange: setRangeValue },
            react_2.default.createElement("div", { style: { display: 'flex' } },
                react_2.default.createElement("div", { style: { marginRight: '8px' } },
                    react_2.default.createElement("span", null, monthLabel),
                    react_2.default.createElement(StylizedGrid, null,
                        react_2.default.createElement(_1.CalendarDays, null, function (value) { return react_2.default.createElement(StylizedDay, { value: value, key: value.key }); }))),
                react_2.default.createElement("div", null,
                    react_2.default.createElement("span", null, nextMonthLabel),
                    react_2.default.createElement(StylizedGrid, null,
                        react_2.default.createElement(_1.CalendarDays, { monthOffset: 1 }, function (value) { return react_2.default.createElement(StylizedDay, { value: value, key: value.key }); })))))));
};
exports.stylized = stylized;
//# sourceMappingURL=Calendar.stories.js.map
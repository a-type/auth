// @unocss-include
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx } from "react/jsx-runtime";
import { createContext, useContext } from 'react';
import classNames from 'clsx';
import { Avatar } from './Avatar.js';
const AvatarListContext = createContext({
    size: 24,
});
export function AvatarList({ children, count, size = 24, }) {
    const width = count > 0 ? size + (count - 1) * ((size * 2) / 3) : 0;
    return (_jsx(AvatarListContext.Provider, Object.assign({ value: { size } }, { children: _jsx("div", Object.assign({ className: "relative flex-basis-auto", style: { width, minWidth: width, height: size } }, { children: children })) })));
}
export function AvatarListItemRoot({ index, children, className, }) {
    const { size } = useContext(AvatarListContext);
    return (_jsx("div", Object.assign({ className: classNames('absolute', className), style: {
            left: index === 0 ? 0 : index * ((size * 2) / 3),
            zIndex: index,
            top: 0,
        } }, { children: children })));
}
export function AvatarListItem(_a) {
    var { index, className } = _a, rest = __rest(_a, ["index", "className"]);
    const { size } = useContext(AvatarListContext);
    return (_jsx(AvatarListItemRoot, Object.assign({ index: index, className: className }, { children: _jsx(Avatar, Object.assign({ style: { width: size, height: size } }, rest)) })));
}
//# sourceMappingURL=AvatarList.js.map
// @unocss-include
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx } from "react/jsx-runtime";
import { forwardRef, useEffect, useRef } from 'react';
import classNames from 'clsx';
import useMergedRef from '../../hooks/useMergedRef.js';
import { useStableCallback } from '../../hooks.js';
export const InfiniteLoadTrigger = forwardRef(function InfiniteLoadTrigger(_a, ref) {
    var { className, onVisible } = _a, rest = __rest(_a, ["className", "onVisible"]);
    const innerRef = useRef(null);
    const stableOnVisible = useStableCallback(onVisible);
    useEffect(() => {
        const observer = new IntersectionObserver((entries) => {
            if (entries[0].isIntersecting) {
                stableOnVisible();
            }
        });
        observer.observe(innerRef.current);
        return () => {
            observer.disconnect();
        };
    }, [stableOnVisible]);
    return (_jsx("div", Object.assign({ ref: useMergedRef(ref, innerRef), className: classNames('flex flex-col items-center', className) }, rest)));
});
//# sourceMappingURL=InfiniteLoadTrigger.js.map
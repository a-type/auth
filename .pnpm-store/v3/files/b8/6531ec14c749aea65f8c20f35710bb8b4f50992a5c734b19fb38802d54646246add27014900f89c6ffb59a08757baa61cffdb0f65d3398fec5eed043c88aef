// @unocss-include
'use client';
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx } from "react/jsx-runtime";
import * as CheckboxPrimitive from '@radix-ui/react-checkbox';
import { forwardRef } from 'react';
import { CheckIcon } from '@radix-ui/react-icons';
import classNames from 'clsx';
import { withClassName } from '../../hooks/withClassName.js';
export const CheckboxRoot = withClassName(CheckboxPrimitive.Root, classNames('layer-components:w-28px layer-components:h-28px layer-components:flex-shrink-0 layer-components:relative layer-components:bg-white layer-components:border-default layer-components:transition layer-components:rounded-full layer-components:shadow-sm', 'layer-components:focus-visible:outline-off layer-components:focus-visible:shadow-focus', 'layer-components:[&[data-state=checked]]:bg-primary-light layer-components:[&[data-state=checked]]:border-primary-dark', 'layer-components:[&:hover:not(:disabled)]:shadow-[0_0_0_1px_var(--color-black)]', 'layer-components:[&:disabled]:bg-transparent layer-components:[&:disabled]:border-gray-3 layer-components:[&:disabled]:shadow-none'));
export function CheckboxIndicator(_a) {
    var { children, className } = _a, props = __rest(_a, ["children", "className"]);
    return (_jsx(CheckboxPrimitive.Indicator, Object.assign({ className: classNames('absolute center translate-[-50%] color-black', className) }, props, { children: children !== null && children !== void 0 ? children : _jsx(CheckIcon, { width: 18, height: 18 }) })));
}
export const Checkbox = forwardRef(function Checkbox(props, ref) {
    return (_jsx(CheckboxRoot, Object.assign({ ref: ref }, props, { children: _jsx(CheckboxIndicator, {}) })));
});
//# sourceMappingURL=Checkbox.js.map
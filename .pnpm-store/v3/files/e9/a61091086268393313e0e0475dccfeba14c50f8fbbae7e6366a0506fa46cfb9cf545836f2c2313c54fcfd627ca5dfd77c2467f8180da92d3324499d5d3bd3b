// @unocss-include
'use client';
import { Fragment as _Fragment, jsx as _jsx } from "react/jsx-runtime";
import { useEffect, useState, useMemo } from 'react';
import { formatDistanceToNowStrict } from 'date-fns';
import { shortenTimeUnits } from '@a-type/utils';
function formatDistanceToNow(date) {
    const now = Date.now();
    if (Math.abs(date.getTime() - now) < 1000) {
        return 'just now';
    }
    return (formatDistanceToNowStrict(date) +
        (date.getTime() < now ? ' ago' : ' from now'));
}
export function RelativeTime({ value, abbreviate }) {
    const asDate = useMemo(() => new Date(value), [value]);
    const [time, setTime] = useState(() => abbreviate
        ? shortenTimeUnits(formatDistanceToNow(asDate))
        : formatDistanceToNow(asDate));
    useEffect(() => {
        const update = () => {
            setTime(abbreviate
                ? shortenTimeUnits(formatDistanceToNow(asDate))
                : formatDistanceToNow(asDate));
        };
        const interval = setInterval(update, 60 * 1000);
        update();
        return () => clearInterval(interval);
    }, [asDate, abbreviate]);
    return _jsx(_Fragment, { children: time });
}
//# sourceMappingURL=RelativeTime.js.map
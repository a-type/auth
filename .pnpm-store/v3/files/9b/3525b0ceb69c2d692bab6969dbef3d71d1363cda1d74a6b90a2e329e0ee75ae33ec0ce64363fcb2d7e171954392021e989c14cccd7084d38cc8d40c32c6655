// @unocss-include
'use client';
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useField, useFormikContext } from 'formik';
import { useEffect, useRef, forwardRef, useCallback, } from 'react';
import useMergedRef from '../../hooks/useMergedRef.js';
import { Input } from '../input/Input.js';
import { TextArea } from '../textArea/TextArea.js';
import { withClassName } from '../../hooks.js';
const emptyRef = (() => { });
export const TextField = forwardRef(function TextField(_a, ref) {
    var { name, label, className, autoFocusDelay, autoFocus, inputRef, onChange, onFocus, onBlur } = _a, rest = __rest(_a, ["name", "label", "className", "autoFocusDelay", "autoFocus", "inputRef", "onChange", "onFocus", "onBlur"]);
    const [props] = useField({
        name,
        onChange,
        onFocus,
        onBlur,
    });
    const innerInputRef = useRef(null);
    useEffect(() => {
        if (autoFocusDelay) {
            setTimeout(() => {
                if (innerInputRef.current)
                    innerInputRef.current.focus();
            }, autoFocusDelay);
        }
    }, [autoFocusDelay]);
    return (_jsxs(FieldRoot, Object.assign({ className: className, ref: ref }, { children: [label && _jsx(FieldLabel, { children: label }), _jsx(Input, Object.assign({}, props, rest, { autoFocus: autoFocus, ref: useMergedRef(innerInputRef, inputRef || emptyRef) }))] })));
});
export function TextAreaField(_a) {
    var { name, label, className, inputRef, onKeyDown, submitOnEnter } = _a, rest = __rest(_a, ["name", "label", "className", "inputRef", "onKeyDown", "submitOnEnter"]);
    const [props] = useField(name);
    const { submitForm } = useFormikContext();
    const onKeyDownInner = useCallback((e) => {
        if (submitOnEnter && e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            submitForm();
        }
        onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(e);
    }, [submitOnEnter, onKeyDown, submitForm]);
    return (_jsxs(FieldRoot, Object.assign({ className: className }, { children: [label && _jsx(FieldLabel, { children: label }), _jsx(TextArea, Object.assign({ ref: inputRef }, props, rest, { onKeyDown: onKeyDownInner }))] })));
}
const FieldRoot = withClassName('div', 'flex flex-col items-stretch gap-1 self-stretch');
const FieldLabel = withClassName('label', 'inline-flex flex-col gap-1 text-sm font-bold text-dark-blend mb-1');
//# sourceMappingURL=TextField.js.map
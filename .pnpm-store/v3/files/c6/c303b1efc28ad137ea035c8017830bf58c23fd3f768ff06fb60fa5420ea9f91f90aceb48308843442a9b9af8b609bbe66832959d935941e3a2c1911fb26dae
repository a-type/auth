import React, { HTMLAttributes } from 'react';
import { WeekDay } from './constants';
export declare type CalendarProps = Omit<HTMLAttributes<HTMLDivElement>, 'value' | 'onChange'> & {
    /**
     * Called when the month / year of the calendar view is changed by the user
     */
    onDisplayChange?: (newValue: {
        month: number;
        year: number;
    }) => any;
    /**
     * The year to display in the calendar view
     */
    displayYear: number;
    /**
     * The month to display in the calendar view
     */
    displayMonth: number;
    /**
     * The selected date value, if any. If you want to use range selection, use
     * rangeValue instead.
     */
    value?: Date | null;
    /**
     * Called when the user selects a new date. Will not be called if the month
     * view is changed; only on the selection of a specific day. If you want to use
     * range selection, use onRangeChange instead.
     */
    onChange?: (value: Date | null) => any;
    /**
     * Provide rangeValue instead of value to enable ranged mode. See onRangeChange, also.
     */
    rangeValue?: {
        start: Date | null;
        end: Date | null;
    };
    /**
     * Change handler for range mode. See rangeValue, also.
     */
    onRangeChange?: (range: {
        start: Date | null;
        end: Date | null;
    }) => any;
    /**
     * Change handler for when the user selects the starting date in a range.
     */
    onRangeStartChange?: (range: Date) => any;
    /**
     * Allows disabling specific dates. Note that disabled dates can still
     * be included within a selected range. If you want to omit disabled
     * dates from your range, you must encode that into your app's logic
     * when processing the final field value.
     */
    getDateEnabled?: (date: Date) => boolean;
    /**
     * change the default highlighted date if the field has no value
     * and becomes focused. Defaults to today.
     */
    defaultDate?: Date;
    /**
     * You can override the locale default week start day
     */
    weekStartsOn?: WeekDay;
};
/**
 * An all-purpose Calendar primitive which manages day selection and various useful event callbacks.
 * Rendering is up to you; this component doesn't render any days or interactive elements - just a div
 * to help track focus within the component.
 * @public
 */
export declare const Calendar: React.ForwardRefExoticComponent<Omit<React.HTMLAttributes<HTMLDivElement>, "value" | "onChange"> & {
    /**
     * Called when the month / year of the calendar view is changed by the user
     */
    onDisplayChange?: ((newValue: {
        month: number;
        year: number;
    }) => any) | undefined;
    /**
     * The year to display in the calendar view
     */
    displayYear: number;
    /**
     * The month to display in the calendar view
     */
    displayMonth: number;
    /**
     * The selected date value, if any. If you want to use range selection, use
     * rangeValue instead.
     */
    value?: Date | null | undefined;
    /**
     * Called when the user selects a new date. Will not be called if the month
     * view is changed; only on the selection of a specific day. If you want to use
     * range selection, use onRangeChange instead.
     */
    onChange?: ((value: Date | null) => any) | undefined;
    /**
     * Provide rangeValue instead of value to enable ranged mode. See onRangeChange, also.
     */
    rangeValue?: {
        start: Date | null;
        end: Date | null;
    } | undefined;
    /**
     * Change handler for range mode. See rangeValue, also.
     */
    onRangeChange?: ((range: {
        start: Date | null;
        end: Date | null;
    }) => any) | undefined;
    /**
     * Change handler for when the user selects the starting date in a range.
     */
    onRangeStartChange?: ((range: Date) => any) | undefined;
    /**
     * Allows disabling specific dates. Note that disabled dates can still
     * be included within a selected range. If you want to omit disabled
     * dates from your range, you must encode that into your app's logic
     * when processing the final field value.
     */
    getDateEnabled?: ((date: Date) => boolean) | undefined;
    /**
     * change the default highlighted date if the field has no value
     * and becomes focused. Defaults to today.
     */
    defaultDate?: Date | undefined;
    /**
     * You can override the locale default week start day
     */
    weekStartsOn?: WeekDay | undefined;
} & React.RefAttributes<any>>;
/** @private docs only! */
export declare const DocsCalendar: (props: CalendarProps) => JSX.Element;

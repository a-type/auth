// @unocss-include
"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Button = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const clsx_1 = __importDefault(require("clsx"));
const react_1 = require("react");
const spinner_js_1 = require("../spinner.js");
const classes_js_1 = require("./classes.js");
const react_slot_1 = require("@radix-ui/react-slot");
const icon_js_1 = require("../icon.js");
exports.Button = (0, react_1.forwardRef)(function Button(_a, ref) {
    var { className, color, size, toggled, align, visuallyDisabled, loading, children, disabled, asChild } = _a, props = __rest(_a, ["className", "color", "size", "toggled", "align", "visuallyDisabled", "loading", "children", "disabled", "asChild"]);
    const Comp = asChild ? react_slot_1.Slot : 'button';
    const buttonProps = Object.assign(Object.assign({ ref: ref }, props), { disabled: disabled || loading, 'data-disabled': visuallyDisabled, tabIndex: visuallyDisabled ? -1 : undefined, className: (0, clsx_1.default)((0, classes_js_1.getButtonClassName)({
            color,
            size,
            toggleable: toggled !== undefined,
            align,
        }), className) });
    // set state when toggleable
    if (toggled !== undefined) {
        buttonProps['aria-pressed'] = toggled;
    }
    if (asChild) {
        // avoid rendering loading spinner with asChild
        return (0, jsx_runtime_1.jsx)(Comp, Object.assign({}, buttonProps, { children: children }));
    }
    return ((0, jsx_runtime_1.jsxs)(Comp, Object.assign({}, buttonProps, { children: [loading && (0, jsx_runtime_1.jsx)(spinner_js_1.Spinner, { size: 16, className: "inline-block w-1em h-1em" }), toggled !== undefined && (0, jsx_runtime_1.jsx)(ToggleIndicator, { value: toggled }), children] })));
});
const ToggleIndicator = (0, react_1.memo)(function ToggleIndicator({ value, }) {
    return ((0, jsx_runtime_1.jsx)(icon_js_1.Icon, { "aria-hidden": true, name: "check", className: "transition-width w-0 ml--1", style: {
            width: value ? '15px' : 0,
        } }));
});
//# sourceMappingURL=Button.js.map
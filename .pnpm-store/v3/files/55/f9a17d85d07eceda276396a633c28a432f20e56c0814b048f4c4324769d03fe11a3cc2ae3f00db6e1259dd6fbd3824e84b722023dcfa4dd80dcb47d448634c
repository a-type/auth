var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, useCallback, useEffect, useRef } from 'react';
import { useCalendarContext } from './CalendarContext';
import { VALUE_DATA_ATTRIBUTE } from './constants';
import { serializeDateValue } from './dataAttributeUtils';
import { getIsFirstRow, getIsFirstWeek, getIsLastRow, getIsLastWeek, getIsWeekend, isBefore, isBetweenDays, isSameDay, } from './dateUtils';
import useCombinedRef from './useCombinedRef';
/** the basic props needed for each day element */
var useDayProps = function (value, isDifferentMonth) {
    var _a;
    var _b = useCalendarContext(), selectedValue = _b.value, highlightedDate = _b.highlightedDate, rangeValue = _b.rangeValue, isFocusWithin = _b.isFocusWithin, weekStartsOn = _b.weekStartsOn;
    var attributes = (_a = {},
        _a[VALUE_DATA_ATTRIBUTE] = serializeDateValue(value),
        _a['aria-label'] = value.toDateString(),
        _a['data-date-number'] = value.getDate(),
        _a['data-day-number'] = value.getDay(),
        _a);
    var firstDay = new Date(value.getFullYear(), value.getMonth(), 1);
    var lastDay = new Date(value.getFullYear(), value.getMonth() + 1, 0);
    var isRangeReversed = rangeValue && isBefore(rangeValue.end, rangeValue.start);
    if (isDifferentMonth) {
        attributes['data-different-month'] = true;
    }
    else {
        // these attributes aren't assigned to days
        // rendered in a grid for a different month
        if (isSameDay(value, firstDay)) {
            attributes['data-day-first'] = true;
        }
        if (isSameDay(value, lastDay)) {
            attributes['data-day-last'] = true;
        }
        if (getIsFirstRow(value, weekStartsOn)) {
            attributes['data-first-row'] = true;
        }
        if (getIsLastRow(value, weekStartsOn)) {
            attributes['data-last-row'] = true;
        }
        if (getIsFirstWeek(value)) {
            attributes['data-top-edge'] = true;
        }
        if (getIsLastWeek(value)) {
            attributes['data-bottom-edge'] = true;
        }
        if (value.getDay() === 0) {
            attributes['data-first-column'] = true;
        }
        if (value.getDay() === 6) {
            attributes['data-last-column'] = true;
        }
        if (isSameDay(value, new Date())) {
            attributes['data-today'] = true;
        }
    }
    if (getIsWeekend(value)) {
        attributes['data-weekend'] = true;
    }
    if (selectedValue && isSameDay(value, selectedValue)) {
        attributes['data-selected'] = true;
    }
    if (isSameDay(value, highlightedDate)) {
        if (isFocusWithin) {
            attributes['data-highlighted'] = true;
        }
        else {
            attributes['data-highlighted-inactive'] = true;
        }
    }
    if (!!rangeValue && isSameDay(value, rangeValue.start)) {
        if (isRangeReversed) {
            attributes['data-range-end'] = true;
        }
        else {
            attributes['data-range-start'] = true;
        }
    }
    if (!!rangeValue && isSameDay(value, rangeValue.end)) {
        if (isRangeReversed) {
            attributes['data-range-start'] = true;
        }
        else {
            attributes['data-range-end'] = true;
        }
    }
    if (!!rangeValue && isBetweenDays(value, rangeValue.start, rangeValue.end)) {
        attributes['data-in-range'] = true;
    }
    return attributes;
};
/**
 * Renders a single day in a calendar. The proper rendering of a day depends on the presence
 * of a wrapping Calendar component. This component renders an unstyled <button> with a
 * variety of attributes you can use to style the day. It automatically reports interactions
 * to the parent Calendar context; there's no need to add your own event handlers to achieve
 * functionality.
 * @public
 */
export var CalendarDay = forwardRef(function (_a, ref) {
    var _b;
    var onClick = _a.onClick, onMouseEnter = _a.onMouseEnter, onMouseLeave = _a.onMouseLeave, _c = _a.value, date = _c.date, _d = _c.isDifferentMonth, isDifferentMonth = _d === void 0 ? false : _d, children = _a.children, _e = _a.disabled, userDisabled = _e === void 0 ? false : _e, restProps = __rest(_a, ["onClick", "onMouseEnter", "onMouseLeave", "value", "children", "disabled"]);
    var _f = useCalendarContext(), setDay = _f.setDay, setDayHovered = _f.setDayHovered, getDateEnabled = _f.getDateEnabled, isFocusWithin = _f.isFocusWithin, highlightedDate = _f.highlightedDate;
    var disabled = !getDateEnabled(date);
    var cannotBeSelected = disabled || userDisabled;
    var highlighted = isSameDay(date, highlightedDate);
    var handleClick = useCallback(function (ev) {
        if (!cannotBeSelected) {
            setDay(date);
        }
        onClick === null || onClick === void 0 ? void 0 : onClick(ev, date, cannotBeSelected);
    }, [date, onClick, setDay]);
    var handleHover = useCallback(function (ev) {
        var successfulHover = setDayHovered(date);
        if (!successfulHover) {
            ev.target.setAttribute('data-invalid-hover', '');
        }
        onMouseEnter === null || onMouseEnter === void 0 ? void 0 : onMouseEnter(ev);
    }, [date, onMouseEnter, setDayHovered]);
    var handleUnhover = useCallback(function (ev) {
        ev.target.removeAttribute('data-invalid-hover');
        onMouseLeave === null || onMouseLeave === void 0 ? void 0 : onMouseLeave(ev);
    }, [onMouseLeave]);
    var dayProps = useDayProps(date, isDifferentMonth);
    var privateRef = useRef(null);
    var combinedRef = useCombinedRef(ref, privateRef);
    // auto-focus when highlighted and calendar is focused - this
    // moves focus from day to day as the user navigates
    var shouldAutoFocus = highlighted && isFocusWithin;
    useEffect(function () {
        if (shouldAutoFocus) {
            privateRef.current && privateRef.current.focus();
        }
    }, [shouldAutoFocus]);
    var extraProps = cannotBeSelected ? (_b = {}, _b['data-disabled'] = true, _b) : {};
    return (React.createElement("button", __assign({ ref: combinedRef, onClick: handleClick, onMouseEnter: handleHover, onMouseLeave: handleUnhover, tabIndex: highlighted ? 0 : -1 }, extraProps, dayProps, restProps), children || date.getDate()));
});
CalendarDay.displayName = 'CalendarDay';
/** @private docs only! */
export var DocsCalendarDay = function (props) { return (React.createElement(CalendarDay, __assign({}, props))); };
//# sourceMappingURL=CalendarDay.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMonthDayList = void 0;
var dateUtils_1 = require("./dateUtils");
/**
 * Expands a month into a grid of days, filling in days from previous
 * or next month as necessary.
 */
var getMonthDayList = function (month, year, weekStartsOn) {
    var date = new Date(year, month, 1);
    // first, since we accept any number for month, we grab and store the 'resolved'
    // values. For instance, if the user passes month=15, after we've put it in a date
    // above, we can then pull out the resolved month of April of the following year.
    var resolvedMonth = date.getMonth();
    var resolvedYear = date.getFullYear();
    var dayOffset = (0, dateUtils_1.getMonthWeekdayOffset)(resolvedMonth, resolvedYear, weekStartsOn);
    // make a grid of days with 7 columns which is large enough to encompass the whole month
    return new Array((0, dateUtils_1.getGridDayCount)(resolvedMonth, resolvedYear, weekStartsOn))
        .fill(null)
        .map(function (_, i) {
        var day = i - dayOffset + 1;
        var gridDate = new Date(resolvedYear, resolvedMonth, day);
        return {
            date: gridDate,
            isDifferentMonth: gridDate.getMonth() !== resolvedMonth,
            key: gridDate.toISOString(),
        };
    });
};
exports.getMonthDayList = getMonthDayList;
//# sourceMappingURL=getMonthDayList.js.map
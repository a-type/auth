// @unocss-include
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { debounce } from '@a-type/utils';
import classNames from 'clsx';
import { useEffect, useId, useMemo, useRef, useState } from 'react';
import { useSize } from '../../hooks/useSize.js';
import { useToggle } from '../../hooks/useToggle.js';
export function Peek({ peekHeight = 120, children, className }) {
    const containerRef = useRef(null);
    const [isPeekable, setIsPeekable] = useState(false);
    const contentRef = useSize(useMemo(() => debounce(({ height }) => {
        setIsPeekable(height > peekHeight);
        if (containerRef.current) {
            containerRef.current.style.setProperty('--collapsible-height', `${height}px`);
        }
    }, 300), []));
    const [open, toggle] = useToggle(false);
    useEffect(() => {
        if (containerRef.current) {
            containerRef.current.style.setProperty('--peek-height', `${peekHeight}px`);
        }
    }, [peekHeight]);
    const id = useId();
    return (_jsxs("div", Object.assign({ className: classNames('relative animate-ease-default animate-forwards overflow-hidden [&[data-state=closed]]:animate-keyframes-peek-close [&[data-state=closed]]:animate-duration-300 [&[data-state=closed]]:max-h-[var(--peek-height,120px)] [&[data-state=open]]:animate-keyframes-peek-open [&[data-state=open]]:animate-duration-600', className), ref: containerRef, "data-state": isPeekable ? (open ? 'open' : 'closed') : undefined }, { children: [_jsx("div", Object.assign({ ref: contentRef, id: id }, { children: children })), isPeekable && (_jsx("button", { "data-state": open ? 'open' : 'closed', className: classNames('h-80px absolute bottom-0 z-1 bg-transparent border-none w-full cursor-pointer border-b border-solid border-white', 'focus-visible:(outline-none bg-gradient-to-b from-transparent to-primary-wash border-b border-solid border-primary', 'after:content-["-_tap_to_expand_-"] after:p-3 after:color-gray9 after:text-xs after:flex after:flex-col after:justify-end after:items-center after:absolute after:inset-0 after:top-auto after:h-80px after:bg-gradient-to-b after:from-transparent after:to-white', 'after:[&[data-state=open]]:content-["-_tap_to_collapse_-"]'), onClick: toggle, "aria-label": "Toggle show description", "aria-expanded": open, "aria-controls": id }))] })));
}
//# sourceMappingURL=Peek.js.map
// @unocss-include
"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InfiniteLoadTrigger = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const clsx_1 = __importDefault(require("clsx"));
const useMergedRef_js_1 = __importDefault(require("../../hooks/useMergedRef.js"));
const hooks_js_1 = require("../../hooks.js");
exports.InfiniteLoadTrigger = (0, react_1.forwardRef)(function InfiniteLoadTrigger(_a, ref) {
    var { className, onVisible } = _a, rest = __rest(_a, ["className", "onVisible"]);
    const innerRef = (0, react_1.useRef)(null);
    const stableOnVisible = (0, hooks_js_1.useStableCallback)(onVisible);
    (0, react_1.useEffect)(() => {
        const observer = new IntersectionObserver((entries) => {
            if (entries[0].isIntersecting) {
                stableOnVisible();
            }
        });
        observer.observe(innerRef.current);
        return () => {
            observer.disconnect();
        };
    }, [stableOnVisible]);
    return ((0, jsx_runtime_1.jsx)("div", Object.assign({ ref: (0, useMergedRef_js_1.default)(ref, innerRef), className: (0, clsx_1.default)('flex flex-col items-center', className) }, rest)));
});
//# sourceMappingURL=InfiniteLoadTrigger.js.map
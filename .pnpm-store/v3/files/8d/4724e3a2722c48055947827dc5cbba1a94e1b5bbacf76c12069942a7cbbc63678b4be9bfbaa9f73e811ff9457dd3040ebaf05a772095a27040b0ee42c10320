// @unocss-include
"use strict";
'use client';
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Select = exports.NativeSelect = exports.SelectContent = exports.SelectIcon = exports.SelectSeparator = exports.SelectLabel = exports.SelectValue = exports.SelectTrigger = exports.UnstyledSelectTrigger = exports.SelectTriggerBase = exports.selectTriggerClassName = exports.SelectRoot = exports.SelectGroup = exports.SelectItemText = exports.SelectItemIndicator = exports.SelectItemIndicatorRoot = exports.SelectItemRoot = exports.SelectItem = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_icons_1 = require("@radix-ui/react-icons");
const SelectPrimitive = __importStar(require("@radix-ui/react-select"));
const react_1 = require("react");
const clsx_1 = __importDefault(require("clsx"));
const withClassName_js_1 = require("../../hooks/withClassName.js");
const button_js_1 = require("../button.js");
const icon_js_1 = require("../icon.js");
exports.SelectItem = (0, react_1.forwardRef)((_a, forwardedRef) => {
    var { children, className } = _a, props = __rest(_a, ["children", "className"]);
    const isNative = (0, react_1.useContext)(IsNativeContext);
    if (isNative) {
        return (0, jsx_runtime_1.jsx)("option", Object.assign({ value: props.value }, { children: children }));
    }
    return ((0, jsx_runtime_1.jsxs)(exports.SelectItemRoot, Object.assign({ className: className }, props, { ref: forwardedRef }, { children: [(0, jsx_runtime_1.jsx)(SelectPrimitive.ItemText, { children: children }), (0, jsx_runtime_1.jsx)(exports.SelectItemIndicator, {})] })));
});
exports.SelectItemRoot = (0, withClassName_js_1.withClassName)(SelectPrimitive.Item, 'text-md leading-4 color-black rounded-sm flex items-center flex-row h-36px pr-4 pl-35px relative select-none', '[&[data-disabled]]:color-gray5 [&[data-disabled]]:pointer-events-none [&[data-highlighted]]:outline-none [&[data-highlighted]]:bg-primary-wash [&[data-highlighted]]:color-black');
exports.SelectItemIndicatorRoot = (0, withClassName_js_1.withClassName)(SelectPrimitive.ItemIndicator, 'absolute left-0 w-25px inline-flex items-center justify-center');
exports.SelectItemIndicator = withNoNativeRender((props) => ((0, jsx_runtime_1.jsx)(exports.SelectItemIndicatorRoot, Object.assign({}, props, { children: (0, jsx_runtime_1.jsx)(react_icons_1.CheckIcon, {}) }))));
exports.SelectItemText = (0, withClassName_js_1.withClassName)(SelectPrimitive.ItemText, '');
const SelectGroup = (props) => {
    const isNative = (0, react_1.useContext)(IsNativeContext);
    if (isNative) {
        return ((0, jsx_runtime_1.jsx)("optgroup", Object.assign({ id: props.id, className: props.className }, { children: props.children })));
    }
    return (0, jsx_runtime_1.jsx)(SelectPrimitive.Group, Object.assign({}, props));
};
exports.SelectGroup = SelectGroup;
exports.SelectRoot = SelectPrimitive.Root;
exports.selectTriggerClassName = (0, clsx_1.default)((0, button_js_1.getButtonClassName)({ color: 'default' }), 'layer-components:[all:unset] layer-components:inline-flex layer-components:[&[data-placeholder]]:color-gray8');
exports.SelectTriggerBase = withNoNativeRender((0, withClassName_js_1.withClassName)(SelectPrimitive.Trigger, exports.selectTriggerClassName));
exports.UnstyledSelectTrigger = withNoNativeRender(SelectPrimitive.Trigger);
exports.SelectTrigger = (0, react_1.forwardRef)(function SelectTrigger(_a, ref) {
    var { children } = _a, props = __rest(_a, ["children"]);
    return ((0, jsx_runtime_1.jsx)(exports.UnstyledSelectTrigger, Object.assign({ asChild: true }, props, { ref: ref }, { children: (0, jsx_runtime_1.jsx)(button_js_1.Button, Object.assign({ className: "gap-2 font-normal" }, { children: children || ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(exports.SelectValue, {}), (0, jsx_runtime_1.jsx)(exports.SelectIcon, {})] })) })) })));
});
exports.SelectValue = withNoNativeRender((0, withClassName_js_1.withClassName)(SelectPrimitive.Value, 'flex flex-row'));
exports.SelectLabel = withNoNativeRender((0, withClassName_js_1.withClassName)(SelectPrimitive.Label, 'px-25px text-xs leading-6 color-black select-none'));
exports.SelectSeparator = withNoNativeRender((0, withClassName_js_1.withClassName)(SelectPrimitive.Separator, 'h-1px bg-gray50 m-1'));
exports.SelectIcon = withNoNativeRender((0, react_1.forwardRef)((_a, forwardedRef) => {
    var { className } = _a, props = __rest(_a, ["className"]);
    return ((0, jsx_runtime_1.jsx)(SelectPrimitive.Icon, Object.assign({ className: (0, clsx_1.default)('color-inherit', className) }, props, { ref: forwardedRef }, { children: (0, jsx_runtime_1.jsx)(icon_js_1.Icon, { name: "chevron", className: "w-[12px] h-[12px] relative top-1px" }) })));
}));
const zIndex = { zIndex: 1001 };
exports.SelectContent = withPassthroughNativeRender((0, react_1.forwardRef)((_a, forwardedRef) => {
    var { children, inDialog, className } = _a, props = __rest(_a, ["children", "inDialog", "className"]);
    return ((0, jsx_runtime_1.jsx)(SelectPrimitive.Portal, { children: (0, jsx_runtime_1.jsxs)(SelectPrimitive.Content, Object.assign({ className: (0, clsx_1.default)('layer-components:overflow-hidden layer-components:bg-white layer-components:rounded-lg layer-components:border layer-components:border-solid layer-components:border-1 layer-components:border-black layer-components:z-menu layer-components:shadow-lg', 'layer-components:transform-origin-[var(--radix-select-content-transform-origin)]', 'layer-components:[&[data-state=open]]:animate-popover-in', 'layer-components:[&[data-state=closed]]:animate-popover-out', 'layer-components:min-w-[var(--radix-select-trigger-width)] layer-components:max-h-[var(--radix-select-content-available-height)]', inDialog && 'z-[calc(var(--z-dialog)+1)]', className), style: zIndex }, props, { ref: forwardedRef }, { children: [(0, jsx_runtime_1.jsx)(SelectPrimitive.ScrollUpButton, Object.assign({ className: "flex items-center justify-center h-25px bg-white color-primary-dark cursor-default" }, { children: (0, jsx_runtime_1.jsx)(react_icons_1.ChevronUpIcon, {}) })), (0, jsx_runtime_1.jsx)(SelectPrimitive.Viewport, Object.assign({ className: "p-1" }, { children: children })), (0, jsx_runtime_1.jsx)(SelectPrimitive.ScrollDownButton, Object.assign({ className: "flex items-center justify-center h-25px bg-white color-primary-dark cursor-default" }, { children: (0, jsx_runtime_1.jsx)(react_icons_1.ChevronDownIcon, {}) }))] })) }));
}));
exports.NativeSelect = (0, react_1.forwardRef)((_a, forwardedRef) => {
    var { className } = _a, props = __rest(_a, ["className"]);
    return ((0, jsx_runtime_1.jsxs)("div", Object.assign({ className: (0, clsx_1.default)('relative', className) }, { children: [(0, jsx_runtime_1.jsx)("select", Object.assign({ className: (0, clsx_1.default)('appearance-none font-inherit bg-white inline-flex items-center justify-center rounded-full px-3 py-1 pr-8 text-sm gap-2 color-black border-solid border border-gray5 hover:border-gray7 focus:outline-none focus-visible:shadow-focus [&[data-placeholder]]:color-gray8') }, props, { ref: forwardedRef })), (0, jsx_runtime_1.jsx)("div", Object.assign({ className: "absolute right-1 top-50% translate-y-[-50%] pointer-events-none" }, { children: (0, jsx_runtime_1.jsx)(react_icons_1.ChevronDownIcon, { className: "w-4 h-4 m-2" }) }))] })));
});
/**
 * A high-level Select which converts to native on mobile. Use with SelectItem.
 */
const Select = (_a) => {
    var { children, value, onValueChange, mobileNative } = _a, rest = __rest(_a, ["children", "value", "onValueChange", "mobileNative"]);
    const mobile = isMobile();
    if (mobile && mobileNative) {
        return ((0, jsx_runtime_1.jsx)(IsNativeContext.Provider, Object.assign({ value: true }, { children: (0, jsx_runtime_1.jsx)(exports.NativeSelect, Object.assign({ onChange: (ev) => {
                    onValueChange === null || onValueChange === void 0 ? void 0 : onValueChange(ev.target.value);
                }, value: value }, rest, { children: children })) })));
    }
    return ((0, jsx_runtime_1.jsx)(exports.SelectRoot, Object.assign({ value: value, onValueChange: onValueChange }, { children: children })));
};
exports.Select = Select;
function isMobile() {
    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
}
// facilitate the auto native switching
const IsNativeContext = (0, react_1.createContext)(false);
function withNoNativeRender(Component) {
    const WithNoNativeRender = (0, react_1.forwardRef)((props, ref) => {
        const isNative = (0, react_1.useContext)(IsNativeContext);
        if (isNative)
            return null;
        return (0, jsx_runtime_1.jsx)(Component, Object.assign({ ref: ref }, props));
    });
    return WithNoNativeRender;
}
function withPassthroughNativeRender(Component) {
    const WithPassthroughNativeRender = (0, react_1.forwardRef)((props, ref) => {
        const isNative = (0, react_1.useContext)(IsNativeContext);
        if (isNative) {
            return (0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: props.children });
        }
        return (0, jsx_runtime_1.jsx)(Component, Object.assign({ ref: ref }, props));
    });
    return WithPassthroughNativeRender;
}
//# sourceMappingURL=Select.js.map
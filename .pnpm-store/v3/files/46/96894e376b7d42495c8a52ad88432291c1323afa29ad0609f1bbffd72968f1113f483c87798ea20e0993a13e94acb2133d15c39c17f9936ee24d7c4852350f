// @unocss-include
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx } from "react/jsx-runtime";
import { Formik } from 'formik';
import { Form } from './Form.js';
import { useCallback } from 'react';
export function FormikForm(_a) {
    var { className, children, onSubmit } = _a, props = __rest(_a, ["className", "children", "onSubmit"]);
    const wrappedOnSubmit = useCallback(async (values, bag) => {
        try {
            bag.setSubmitting(true);
            return await onSubmit(values, bag);
        }
        finally {
            bag.setSubmitting(false);
        }
    }, [onSubmit]);
    if (typeof children === 'function') {
        return (_jsx(Formik, Object.assign({ onSubmit: wrappedOnSubmit }, props, { children: (formik) => _jsx(Form, Object.assign({ className: className }, { children: children(formik) })) })));
    }
    return (_jsx(Formik, Object.assign({ onSubmit: wrappedOnSubmit }, props, { children: _jsx(Form, Object.assign({ className: className }, { children: children })) })));
}
//# sourceMappingURL=FormikForm.js.map
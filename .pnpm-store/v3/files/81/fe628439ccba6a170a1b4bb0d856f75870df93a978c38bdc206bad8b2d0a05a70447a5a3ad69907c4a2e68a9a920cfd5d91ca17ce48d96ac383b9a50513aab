// @unocss-include
import { debounce } from '@a-type/utils';
import { useEffect, useMemo, useRef } from 'react';
import { useStableCallback } from './useStableCallback.js';
export function useSize(callback) {
    const ref = useRef(null);
    const cb = useStableCallback(callback);
    useEffect(() => {
        const target = ref.current;
        if (!target) {
            return () => {
                //
            };
        }
        const resizeObserver = new ResizeObserver((entries) => {
            entries.forEach((entry) => {
                cb({
                    width: entry.target.clientWidth,
                    height: entry.target.clientHeight,
                });
            });
        });
        resizeObserver.observe(target);
        return () => {
            resizeObserver.unobserve(target);
            resizeObserver.disconnect();
        };
    }, [ref, cb]);
    return ref;
}
export function useSizeCssVars(debounceMs, applyToRef, propertyNames) {
    const update = useMemo(() => {
        const doupdate = ({ width, height }) => {
            var _a, _b, _c, _d;
            const usedRef = applyToRef || ref;
            (_a = usedRef.current) === null || _a === void 0 ? void 0 : _a.style.setProperty((_b = propertyNames === null || propertyNames === void 0 ? void 0 : propertyNames.width) !== null && _b !== void 0 ? _b : '--width', width + 'px');
            (_c = usedRef.current) === null || _c === void 0 ? void 0 : _c.style.setProperty((_d = propertyNames === null || propertyNames === void 0 ? void 0 : propertyNames.height) !== null && _d !== void 0 ? _d : '--height', height + 'px');
        };
        if (debounceMs) {
            return debounce(doupdate, debounceMs);
        }
        else {
            return doupdate;
        }
    }, [debounceMs, applyToRef, propertyNames === null || propertyNames === void 0 ? void 0 : propertyNames.width, propertyNames === null || propertyNames === void 0 ? void 0 : propertyNames.height]);
    const ref = useSize(update);
    return ref;
}
export function useBounds(callback) {
    const ref = useRef(null);
    const cb = useStableCallback(callback);
    useEffect(() => {
        const target = ref.current;
        if (!target) {
            return () => {
                //
            };
        }
        const resizeObserver = new ResizeObserver((entries) => {
            entries.forEach((entry) => {
                const { left, top, width, height } = entry.target.getBoundingClientRect();
                cb({ left, top, width, height });
            });
        });
        resizeObserver.observe(target);
        return () => {
            resizeObserver.unobserve(target);
            resizeObserver.disconnect();
        };
    }, [ref, cb]);
    return ref;
}
export function useBoundsCssVars(debounceMs, applyToRef, propertyNames) {
    const update = useMemo(() => {
        const doupdate = ({ left, top, width, height, }) => {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
            const usedRef = applyToRef || ref;
            (_a = usedRef.current) === null || _a === void 0 ? void 0 : _a.style.setProperty((_b = propertyNames === null || propertyNames === void 0 ? void 0 : propertyNames.left) !== null && _b !== void 0 ? _b : '--left', left + 'px');
            (_c = usedRef.current) === null || _c === void 0 ? void 0 : _c.style.setProperty((_d = propertyNames === null || propertyNames === void 0 ? void 0 : propertyNames.top) !== null && _d !== void 0 ? _d : '--top', top + 'px');
            (_e = usedRef.current) === null || _e === void 0 ? void 0 : _e.style.setProperty((_f = propertyNames === null || propertyNames === void 0 ? void 0 : propertyNames.width) !== null && _f !== void 0 ? _f : '--width', width + 'px');
            (_g = usedRef.current) === null || _g === void 0 ? void 0 : _g.style.setProperty((_h = propertyNames === null || propertyNames === void 0 ? void 0 : propertyNames.height) !== null && _h !== void 0 ? _h : '--height', height + 'px');
            (_j = usedRef.current) === null || _j === void 0 ? void 0 : _j.style.setProperty((_k = propertyNames === null || propertyNames === void 0 ? void 0 : propertyNames.ready) !== null && _k !== void 0 ? _k : '--ready', '1');
        };
        if (debounceMs) {
            return debounce(doupdate, debounceMs);
        }
        else {
            return doupdate;
        }
    }, [
        debounceMs,
        applyToRef,
        propertyNames === null || propertyNames === void 0 ? void 0 : propertyNames.left,
        propertyNames === null || propertyNames === void 0 ? void 0 : propertyNames.top,
        propertyNames === null || propertyNames === void 0 ? void 0 : propertyNames.width,
        propertyNames === null || propertyNames === void 0 ? void 0 : propertyNames.height,
    ]);
    const ref = useBounds(update);
    return ref;
}
//# sourceMappingURL=useSize.js.map
// @unocss-include
"use strict";
'use client';
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextAreaField = exports.TextField = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const formik_1 = require("formik");
const react_1 = require("react");
const useMergedRef_js_1 = __importDefault(require("../../hooks/useMergedRef.js"));
const Input_js_1 = require("../input/Input.js");
const TextArea_js_1 = require("../textArea/TextArea.js");
const hooks_js_1 = require("../../hooks.js");
const emptyRef = (() => { });
exports.TextField = (0, react_1.forwardRef)(function TextField(_a, ref) {
    var { name, label, className, autoFocusDelay, autoFocus, inputRef, onChange, onFocus, onBlur } = _a, rest = __rest(_a, ["name", "label", "className", "autoFocusDelay", "autoFocus", "inputRef", "onChange", "onFocus", "onBlur"]);
    const [props] = (0, formik_1.useField)({
        name,
        onChange,
        onFocus,
        onBlur,
    });
    const innerInputRef = (0, react_1.useRef)(null);
    (0, react_1.useEffect)(() => {
        if (autoFocusDelay) {
            setTimeout(() => {
                if (innerInputRef.current)
                    innerInputRef.current.focus();
            }, autoFocusDelay);
        }
    }, [autoFocusDelay]);
    return ((0, jsx_runtime_1.jsxs)(FieldRoot, Object.assign({ className: className, ref: ref }, { children: [label && (0, jsx_runtime_1.jsx)(FieldLabel, { children: label }), (0, jsx_runtime_1.jsx)(Input_js_1.Input, Object.assign({}, props, rest, { autoFocus: autoFocus, ref: (0, useMergedRef_js_1.default)(innerInputRef, inputRef || emptyRef) }))] })));
});
function TextAreaField(_a) {
    var { name, label, className, inputRef, onKeyDown, submitOnEnter } = _a, rest = __rest(_a, ["name", "label", "className", "inputRef", "onKeyDown", "submitOnEnter"]);
    const [props] = (0, formik_1.useField)(name);
    const { submitForm } = (0, formik_1.useFormikContext)();
    const onKeyDownInner = (0, react_1.useCallback)((e) => {
        if (submitOnEnter && e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            submitForm();
        }
        onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(e);
    }, [submitOnEnter, onKeyDown, submitForm]);
    return ((0, jsx_runtime_1.jsxs)(FieldRoot, Object.assign({ className: className }, { children: [label && (0, jsx_runtime_1.jsx)(FieldLabel, { children: label }), (0, jsx_runtime_1.jsx)(TextArea_js_1.TextArea, Object.assign({ ref: inputRef }, props, rest, { onKeyDown: onKeyDownInner }))] })));
}
exports.TextAreaField = TextAreaField;
const FieldRoot = (0, hooks_js_1.withClassName)('div', 'flex flex-col items-stretch gap-1 self-stretch');
const FieldLabel = (0, hooks_js_1.withClassName)('label', 'inline-flex flex-col gap-1 text-sm font-bold text-dark-blend mb-1');
//# sourceMappingURL=TextField.js.map
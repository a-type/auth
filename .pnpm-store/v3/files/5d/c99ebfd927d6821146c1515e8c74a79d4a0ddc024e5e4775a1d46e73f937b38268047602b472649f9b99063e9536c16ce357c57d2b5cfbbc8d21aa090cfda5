import React, { HTMLAttributes, MouseEvent } from 'react';
export interface CalendarDayValue {
    date: Date;
    isDifferentMonth?: boolean;
}
export interface CalendarDayProps extends Omit<HTMLAttributes<HTMLButtonElement>, 'value' | 'onClick'> {
    /** the day this calendar day box represents */
    value: CalendarDayValue;
    /** called when the user clicks the day box - even if the date is not allowed to be selected */
    onClick?: (ev: MouseEvent<HTMLButtonElement>, value: Date, isDisabled: boolean) => any;
    disabled?: boolean;
}
/**
 * Renders a single day in a calendar. The proper rendering of a day depends on the presence
 * of a wrapping Calendar component. This component renders an unstyled <button> with a
 * variety of attributes you can use to style the day. It automatically reports interactions
 * to the parent Calendar context; there's no need to add your own event handlers to achieve
 * functionality.
 * @public
 */
export declare const CalendarDay: React.ForwardRefExoticComponent<CalendarDayProps & React.RefAttributes<HTMLButtonElement>>;
/** @private docs only! */
export declare const DocsCalendarDay: (props: CalendarDayProps) => JSX.Element;

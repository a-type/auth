// @unocss-include
'use client';
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx } from "react/jsx-runtime";
import classNames from 'clsx';
import useMergedRef from '../../hooks/useMergedRef.js';
import { forwardRef, useCallback, useLayoutEffect, useRef, useState, } from 'react';
import { inputClassName } from '../input.js';
export const TextArea = forwardRef(function TextArea(_a, ref) {
    var _b;
    var { autoSize, autoSelect, onFocus, className, rows, padBottomPixels = 0, onChange } = _a, rest = __rest(_a, ["autoSize", "autoSelect", "onFocus", "className", "rows", "padBottomPixels", "onChange"]);
    const innerRef = useRef(null);
    const finalRef = useMergedRef(innerRef, ref);
    const [innerValue, setInnerValue] = useState('');
    const finalValue = (_b = rest.value) !== null && _b !== void 0 ? _b : innerValue;
    // TODO: can layout effect be avoided? useEffect shows a flash of the wrong size
    useLayoutEffect(() => {
        if (!autoSize)
            return;
        const element = innerRef.current;
        if (element) {
            if (element.value !== '' || padBottomPixels) {
                element.style.height = 'auto';
                const baseHeight = element.scrollHeight;
                element.style.height = baseHeight + padBottomPixels + 'px';
            }
        }
    }, [autoSize, padBottomPixels, finalValue]);
    const handleChange = useCallback((e) => {
        setInnerValue(e.target.value);
        if (onChange) {
            onChange(e);
        }
    }, [onChange]);
    const handleFocus = useCallback((e) => {
        if (autoSelect) {
            e.target.select();
        }
        if (onFocus) {
            onFocus(e);
        }
    }, [autoSelect, onFocus]);
    return (_jsx("textarea", Object.assign({ ref: finalRef, className: classNames(inputClassName, 'layer-components:[font-family:inherit] layer-components:text-inherit layer-components:overflow-hidden', {
            'layer-components:[resize:vertical]': !autoSize,
            'layer-components:[resize:none]': autoSize,
        }, className), rows: autoSize ? 1 : rows, onChange: handleChange, onFocus: handleFocus }, rest)));
});
//# sourceMappingURL=TextArea.js.map